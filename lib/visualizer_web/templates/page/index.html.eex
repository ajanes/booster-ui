<p><img src="images/rocket.png">&nbsp;<b>Booster UI</b></p>
<p>This visualization shows how booster connects to nodes and endpoints. For more about Booster, see <a href="https://github.com/danielmorandini/booster-network">here</a>.</p>

<%# http://bl.ocks.org/hugolpz/cd89b50d834828261b45af9e7a5ce926 %>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

<style>
  .link {
    stroke: #2E2E2E;
  }

  .node {
    stroke: #fff;
    stroke-width: 2px;
  }
  .textClass {
    stroke: #323232;
    font-family: "Lucida Grande", "Droid Sans", Arial, Helvetica, sans-serif;
    font-weight: normal;
    stroke-width: .5;
    font-size: 14px;
  }
</style>

<script type="text/javascript">
  
  var graph;

  function myGraph() {
    // Add and remove elements on the graph object
    this.addNode = function(id, group) {
      nodes.push({
        "id": id,
        "group": group
      });
      update();
    };

    this.removeNode = function(id) {
      var i = 0;
      var n = findNode(id);
      if (n != null) {
        while (i < links.length) {
          if ((links[i]['source'] == n) || (links[i]['target'] == n)) {
            links.splice(i, 1);
          } else i++;
        }
        nodes.splice(findNodeIndex(id), 1);
        update();
      }
    };

    this.removeLink = function(source, target) {
      for (var i = 0; i < links.length; i++) {
        if (links[i].source.id == source && links[i].target.id == target) {
          links.splice(i, 1);
          break;
        }
      }
      update();
    };

    this.removeAllLinks = function() {
      links.splice(0, links.length);
      update();
    };

    this.removeAllNodes = function() {
      nodes.splice(0, nodes.length);
      update();
    };

    this.addLink = function(source, target, workload, distance) {
      links.push({
        "source": findNode(source),
        "target": findNode(target),
        "workload": workload,
        "distance": distance
      });
      update();
    };

    var findNode = function(id) {
      for (var i in nodes) {
        if (nodes[i]["id"] === id) 
          return nodes[i];
      };
      return null;
    };

    var findNodeIndex = function(id) {
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].id == id)
          return i;
      };
      return -1;
    };

    // set up the D3 visualisation in the specified element
    var w = $('body').innerWidth(),
      h = 450;

    var color = d3.scale.category10();

    var vis = d3.select("main")
      .append("svg:svg")
      .attr("width", w)
      .attr("height", h)
      .attr("id", "svg")
      .attr("pointer-events", "all")
      .attr("viewBox", "0 0 " + w + " " + h)
      .attr("perserveAspectRatio", "xMinYMid")
      .append('svg:g');

    var force = d3.layout.force();

    var nodes = force.nodes(),
      links = force.links();

    var update = function() {
      var link = vis.selectAll("line")
        .data(links, function(d) {
          return d.source.id + "-" + d.target.id;
        });

      link.enter().append("line")
        .attr("id", function(d) {
          return d.source.id + "-" + d.target.id;
        })
        .attr("stroke-width", function(d) {
          return d.workload;
        })
        .attr("class", "link");
        
      link.append("title")
        .text(function(d) {
          return d.distance;
        });
      link.exit().remove();

      var node = vis.selectAll("g.node")
        .data(nodes, function(d) {
          return d.id;
        });

      var nodeEnter = node.enter().append("g")
        .attr("class", "node")
        .call(force.drag);

      nodeEnter.append("svg:circle")
        .attr("r", 12)
        .attr("id", function(d) {
          return "Node;" + d.id;
        })
        .attr("class", "nodeStrokeClass")
        .attr("fill", function(d) {
          return color(d.group);
        });

      nodeEnter.append("svg:text")
        .attr("class", "textClass")
        .attr("x", 14)
        .attr("y", ".31em")
        .text(function(d) {
          return d.id;
        });

      node.exit().remove();

      force.on("tick", function() {

        if (nodes.length>0) {
          nodes[0].x = w / 4;
          nodes[0].y = h / 4;
        }

        node.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });

        link.attr("x1", function(d) {
            return d.source.x;
          })
          .attr("y1", function(d) {
            return d.source.y;
          })
          .attr("x2", function(d) {
            return d.target.x;
          })
          .attr("y2", function(d) {
            return d.target.y;
          });
      });

      // Restart the force layout.
      force
        .gravity(.0001)
        .charge(-200)
        .friction(0)
        .linkDistance(function(d) {
          return d.distance * 10
        })
        .size([w, h])        
        .start();
    };

    // Make it all go
    update();
  }

  graph = new myGraph("#svgdiv");
  
  // because of the way the network is created, nodes are created first, and links second,
  // so the lines were on top of the nodes, this just reorders the DOM to put the svg:g on top
  function keepNodesOnTop() {
    $(".nodeStrokeClass").each(function(index) {
      var gnode = this.parentNode;
      gnode.parentNode.appendChild(gnode);
    });
  }

  let app = require("js/app");
  app.channel.on_update(function(payload) {
    switch (payload.command) {
      case "reset":
        graph.removeAllNodes();
        graph.removeAllLinks();
        console.log("All nodes removed.");
        break;
      case "add_node":
        graph.addNode(payload.name, payload.group);
        keepNodesOnTop();
        console.log("Node added.");
        break;
      case "add_link":
        graph.addLink(payload.from, payload.to, payload.workload, payload.distance);
        console.log("Link added.");
        keepNodesOnTop();
        break;
      case "remove_node":
        graph.removeNode(payload.name);
        console.log("Node removed.");
        keepNodesOnTop();
        break;
      case "update_link":
        graph.removeLink(payload.from, payload.to);
        graph.addLink(payload.from, payload.to, payload.workload, payload.distance);
        console.log("Node updated.");
        keepNodesOnTop();
        break;
      case "remove_link":
        graph.removeLink(payload.from, payload.to);
        console.log("Link removed.");
        keepNodesOnTop();
        break;
    }
  });

  var url = "/api/nodes";
  d3.json(url, function(data) {
    for (var i = 0; i < data.nodes.length; i++) {
      var node = data.nodes[i];
      graph.addNode(node.name, node.group);    
    }
    for (var i = 0; i < data.links.length; i++) {
      var link = data.links[i];
      graph.addLink(link.from, link.to, link.workload, link.distance);
    }
    keepNodesOnTop();
  });
</script>